CREATE TABLE TBL_GRADE(
	GRADE_ID NUMBER,
	NAME VARCHAR2(1000),
	CONSTRAINT PK_GRADE PRIMARY KEY(GRADE_ID)
);

CREATE TABLE TBL_USER(
	USER_ID NUMBER,
	LOGIN_ID VARCHAR2(1000),
	GRADE_ID NUMBER,
	CONSTRAINT PK_USER PRIMARY KEY (USER_ID),
	CONSTRAINT FK_USER FOREIGN KEY (GRADE_ID)
		REFERENCES TBL_GRADE(GRADE_ID)
);

CREATE SEQUENCE SEQ_GRADE;
CREATE SEQUENCE SEQ_USER;

INSERT INTO TBL_GRADE
(GRADE_ID, NAME)
VALUES(SEQ_GRADE.NEXTVAL, 'VVIP');

INSERT INTO TBL_GRADE
(GRADE_ID, NAME)
VALUES(SEQ_GRADE.NEXTVAL, 'VIP');

INSERT INTO TBL_GRADE
(GRADE_ID, NAME)
VALUES(SEQ_GRADE.NEXTVAL, 'NORMAL');


INSERT INTO TBL_USER
(USER_ID, LOGIN_ID, GRADE_ID)
VALUES(SEQ_USER.NEXTVAL, 'A', 1);

INSERT INTO TBL_USER
(USER_ID, LOGIN_ID, GRADE_ID)
VALUES(SEQ_USER.NEXTVAL, 'B', 2);

SELECT * FROM TBL_USER;
SELECT * FROM TBL_GRADE;

SELECT *
FROM TBL_USER U INNER JOIN TBL_GRADE G
ON U.GRADE_ID = G.GRADE_ID ;

SELECT *
FROM TBL_USER U RIGHT JOIN TBL_GRADE G
ON U.GRADE_ID = G.GRADE_ID ;


-- LEFT OUTER JOIN
-- 우선 왼쪽 테이블의 정보를 전부 가져온 후 ON조건과 일치하는 행을 병합

-- RIGHT OUTER JOIN
-- 우선 오른쪽 테이블의 정보를 전부 가져온 후 ON조건과 일치하는 행을 병합

-- 카테시안 곱, CROSS JOIN
SELECT *
FROM TBL_USER, TBL_GRADE
WHERE USER_ID = 1 AND GRADE_ID =1;

-------------------------------------------------
/*
 * PLAYER 테이블에서 키가 NULL인 선수들의 키를 170으로 변경하여
 * 평균 조회(UPDATE 아님! SELECT로만 하기)
 */
SELECT * FROM PLAYER p ;

SELECT ROUND(AVG(NVL(HEIGHT,170)),2) 평균키
FROM PLAYER ;


/*
 * PLAYER 테이블에서 팀 별 최대 몸무게 조회
 */
SELECT * FROM PLAYER ;

SELECT TEAM_ID ,MAX(WEIGHT)
FROM PLAYER
GROUP BY TEAM_ID; 


/*
 * AVG함수를 쓰지 않고 PLAYER 테이블에서 선수들의 평균 키 구하기
 */
SELECT * FROM PLAYER p ;

SELECT ROUND(SUM(HEIGHT) /COUNT(HEIGHT),2) 평균키 
FROM PLAYER p ;


/*
 * DEPT 테이블의 LOC별 평균 급여를 반올림한 값과 각 LOC별 SAL합을 조회
 */
SELECT * FROM DEPT d ;
SELECT * FROM EMP e ;

SELECT LOC ,
	ROUND(AVG(SAL)) "평균 급여",
	SUM(SAL) "총 급여" 
FROM DEPT d JOIN EMP e 
ON D.DEPTNO = E.DEPTNO
GROUP BY LOC;


/*
 * PLAYER 테이블에서 팀별 최대 몸무게인 선수 전체 정보 조회
 */
SELECT *FROM PLAYER p ;
SELECT *FROM TEAM t ;

SELECT TEAM_ID ,MAX(WEIGHT)
FROM PLAYER p
GROUP BY TEAM_ID
ORDER BY TEAM_ID;
 
SELECT *
FROM PLAYER p JOIN (
	SELECT TEAM_ID ,MAX(WEIGHT) WEIGHT 
	FROM PLAYER p
	GROUP BY TEAM_ID
	) T
ON P.WEIGHT = T.WEIGHT AND P.TEAM_ID = T.TEAM_ID
ORDER BY P.TEAM_ID ;


/*
 * EMP 테이블에서 HIREDATE의 연도가 FORD 사원의 입사연도와 같은 사원 전체 정보 조회
 */
SELECT * FROM EMP;
SELECT * FROM DEPT ;

SELECT HIREDATE 
FROM EMP e 
WHERE ENAME = 'FORD';

SELECT E.*
FROM EMP e 
WHERE TO_CHAR(HIREDATE, 'YYYY') =
	(SELECT TO_CHAR(HIREDATE, 'YYYY') 
	FROM EMP e 
	WHERE ENAME = 'FORD'
);


















DROP TABLE USERS;
DROP TABLE TBL_USER;
DROP SEQUENCE SEQ_USER;

CREATE TABLE TBL_USER(
	USER_ID NUMBER,
	LOGIN_ID VARCHAR2(1000),
	PASSWORD VARCHAR2(1000),
	CONSTRAINT PK_USER PRIMARY KEY(USER_ID)
);

CREATE TABLE TBL_BOARD(
	BOARD_ID NUMBER,
	TITLE VARCHAR2(1000),
	CONTENT VARCHAR2(1000),
	CREATED_DATE DATE DEFAULT SYSDATE,
	USER_ID NUMBER,
	CONSTRAINT PK_BOARD PRIMARY KEY(BOARD_ID),
	CONSTRAINT FK_BOARD FOREIGN KEY(USER_ID)
		REFERENCES TBL_USER(USER_ID)
);

CREATE SEQUENCE SEQ_USER;
CREATE SEQUENCE SEQ_BOARD;



INSERT INTO TBL_USER
(USER_ID, LOGIN_ID, PASSWORD)
VALUES(SEQ_USER.NEXTVAL, 'AAA', '1234');

INSERT INTO TBL_USER
(USER_ID, LOGIN_ID, PASSWORD)
VALUES(SEQ_USER.NEXTVAL, 'BBB', '1234');

INSERT INTO TBL_USER
(USER_ID, LOGIN_ID, PASSWORD)
VALUES(SEQ_USER.NEXTVAL, 'CCC', '1234');

SELECT *FROM TBL_USER tu ;


INSERT INTO TBL_BOARD
(BOARD_ID, TITLE, CONTENT, USER_ID)
VALUES(SEQ_BOARD.NEXTVAL, 'TEST1', 'TEST1', 1);

INSERT INTO TBL_BOARD
(BOARD_ID, TITLE, CONTENT, USER_ID)
VALUES(SEQ_BOARD.NEXTVAL, 'TEST2', 'TEST2', 1);

INSERT INTO TBL_BOARD
(BOARD_ID, TITLE, CONTENT, USER_ID)
VALUES(SEQ_BOARD.NEXTVAL, 'TEST3', 'TEST3', 2);

INSERT INTO TBL_BOARD
(BOARD_ID, TITLE, CONTENT, USER_ID)
VALUES(SEQ_BOARD.NEXTVAL, 'TEST4', 'TEST4', 3);

SELECT *FROM TBL_BOARD tb ;

-- 로그인 쿼리
SELECT * FROM TBL_USER
WHERE LOGIN_ID = 'AAA' AND PASSWORD = '12345';


/* 게시판 리스트를 조회하는 쿼리 만들기
 * 게시물 번호, 제목, 작성일, 회원 로그인아이디를 한 번에 조회하기
 * 
 */

SELECT TB.BOARD_ID 게시물번호, TB.TITLE 제목,
	TB.CREATED_DATE 작성일, LOGIN_ID 로그인아이디
FROM TBL_USER tu JOIN TBL_BOARD tb 
ON TU.USER_ID = TB.USER_ID ;


CREATE TABLE TBL_LIKE(
	USER_ID NUMBER,
	BOARD_ID NUMBER,
	CONSTRAINT PK_LIKE PRIMARY KEY(USER_ID, BOARD_ID),
	CONSTRAINT FK_LIKE_USER FOREIGN KEY (USER_ID)
		REFERENCES TBL_USER(USER_ID),
	CONSTRAINT FK_LIKE_BOARD FOREIGN KEY (BOARD_ID)
		REFERENCES TBL_BOARD(BOARD_ID)	
);

INSERT INTO TBL_LIKE(USER_ID, BOARD_ID)
VALUES(3, 3);

SELECT *FROM TBL_LIKE tl ;

/*
 * 3번회원 기준으로
 * 내가 좋아요를 누른 게시물들의 정보를 조회하기
 */
SELECT * FROM TBL_LIKE;
SELECT * FROM TBL_BOARD;

SELECT * FROM TBL_LIKE L
WHERE USER_ID = 3;

SELECT *
FROM TBL_LIKE L JOIN TBL_BOARD B
ON L.USER_ID = 3 AND L.BOARD_ID = B.BOARD_ID ;


-- 게시판 리스트 조회, 각 게시물별 좋아요 수를 포함
SELECT TB.BOARD_ID 게시물번호, TB.TITLE 제목,
	TB.CREATED_DATE 작성일, LOGIN_ID 로그인아이디
FROM TBL_USER tu JOIN TBL_BOARD tb 
ON TU.USER_ID = TB.USER_ID ;

-- 1. 서브쿼리/JOIN 사용
SELECT BOARD_ID, COUNT(USER_ID)
FROM TBL_LIKE tl 
GROUP BY BOARD_ID;


SELECT TB.BOARD_ID 게시물번호, TB.TITLE 제목,
	TB.CREATED_DATE 작성일, LOGIN_ID 로그인아이디,
	NVL("좋아요 수",0) "좋아요 수"
FROM TBL_USER tu JOIN TBL_BOARD tb 
	ON TU.USER_ID = TB.USER_ID 
LEFT JOIN 
	(SELECT BOARD_ID, COUNT(USER_ID) "좋아요 수"
	FROM TBL_LIKE tl 
	GROUP BY BOARD_ID) S
	ON TB.BOARD_ID = S.BOARD_ID;


-- 2. SELECT 서브쿼리
SELECT TB.BOARD_ID 게시물번호, TB.TITLE 제목,
	TB.CREATED_DATE 작성일, LOGIN_ID 로그인아이디,
	(SELECT COUNT(USER_ID) FROM TBL_LIKE L
	WHERE TB.BOARD_ID = L.BOARD_ID) "좋아요 수"
FROM TBL_USER tu JOIN TBL_BOARD tb 
ON TU.USER_ID = TB.USER_ID; 

-- 팔로우 기능 구현
CREATE TABLE TBL_FOLLOW(
	FOLLOW_FROM NUMBER,
	FOLLOW_TO NUMBER,
	CONSTRAINT PK_FOLLOW PRIMARY KEY(FOLLOW_FROM, FOLLOW_TO),
	CONSTRAINT FK_FROM FOREIGN KEY(FOLLOW_FROM)
		REFERENCES TBL_USER(USER_ID),
	CONSTRAINT FK_TO FOREIGN KEY(FOLLOW_TO)
		REFERENCES TBL_USER(USER_ID)
);

SELECT * FROM TBL_FOLLOW;


INSERT INTO TBL_FOLLOW(FOLLOW_FROM, FOLLOW_TO)
VALUES(3, 1);

SELECT * FROM TBL_FOLLOW tf ;

-- 내가 팔로우한 회원들의 정보 조회
SELECT *
FROM TBL_FOLLOW F 
WHERE FOLLOW_FROM = 1 ;

SELECT *FROM TBL_USER;

SELECT U.LOGIN_ID 
FROM TBL_FOLLOW F JOIN TBL_USER U
ON FOLLOW_FROM = 1 AND F.FOLLOW_TO = U.USER_ID ;

-- 나를 팔로우한 회원들의 정보 조회
SELECT * FROM TBL_FOLLOW F
WHERE FOLLOW_TO = 1;

SELECT * FROM TBL_USER;

SELECT *
FROM TBL_FOLLOW F JOIN TBL_USER U
ON FOLLOW_TO = 1 AND F.FOLLOW_FROM = U.USER_ID ;















